/* PROJECT SHOPPINGMALL DATABASE
   TABLE CREATION : DBA
   DML WORK : DEV
*/ 
   
/* 순서
   1. 테이블 생성, 제약조건 추가, 권한 부여, SYNONYM 부여 : MEMBERS(MM),  ACCESSLOG(AL), GOODS(GO), BASKET(BA), ORDERS(OR), ORDERDETAIL(OD), SELLER(SE), SALES(SA)
   2. 뷰 생성(MINFO, GOODSINFO) : CREATE VIEW > GRANT SELECT ON VIEW > CREATE PUBLIC SYNONYM 
   3. SAIMAGE(SI) 테이블 생성 : 이 때 기존 생성한 SA테이블의 데이터를 SI로 복사해오는 방식 이용 
   4. GOODSINFO VIEW 수정: 이미지 삽입 반영 및 SI 테이블의 내용도 VIEW 하나에서 볼 수 있게 REPLACE 
   5. BASKETLIST VIEW 생성 : 장바구니 조회를 한번에 편리하게 관리하기 위한 새로운 VIEW 생성
*/

/* 
 1. 테이블 생성 : 데이터 조회 및 입력에 필요한 내용을 담은 테이블들을 신규로 생성한다.
 
회원테이블 :: MEMBERS(MM)
  PK    아이디         MM_ID
  NN    패스워드       MM_PASSWORD
  NN    이름           MM_NAME
  UK    전화번호       MM_PHONE
  NN    활성화여부      MM_STATE
*/

-- DBA
CREATE TABLE DBA5.MEMBERS(
  MM_ID         NVARCHAR2(10),
  MM_PASSWORD   NVARCHAR2(10),
  MM_NAME       NVARCHAR2(5),
  MM_PHONE      NCHAR(11),
  MM_STATE      NCHAR(1)
)TABLESPACE UNITY;

-- 제약조건
ALTER TABLE DBA5.MEMBERS
ADD CONSTRAINT MM_ID_PK PRIMARY KEY(MM_ID)
ADD CONSTRAINT MM_PHONE_UK UNIQUE(MM_PHONE)
MODIFY MM_PASSWORD NOT NULL
MODIFY MM_NAME NOT NULL;

-- 확인
SELECT * FROM ALL_CONSTRAINTS WHERE TABLE_NAME='MEMBERS';

-- 권한부여(롤 네임 : UNITY5)
GRANT SELECT, INSERT, UPDATE ON DBA5.MEMBERS TO UNITY5;

-- PUBLIC SYNONYM 
CREATE PUBLIC SYNONYM MM FOR DBA5.MEMBERS;

-- 확인
SELECT * FROM MM;


/*
접속로그 테이블 :: ACCESSLOG(AL)
  PK FK 아이디     NVARCHAR2(10)
  PK DF 접속시간   DATE         DFAULT SYSDATE
  NN    접속종류   NUMBER(1,0)   
*/

-- DBA
ALTER TABLE DBA5.ACCESSLOG(
  AL_MMID   NVARCHAR2(10),
  AL_TIME   DATE,
  AL_TYPE   NUMBER(1,0)
)TABLESPACE UNITY;


-- CONSTRAINTS
ALTER TABLE DBA5.ACCESSLOG
ADD CONSTRAINT AL_MMID_TIME_PK  PRIMARY KEY(AL_MMID, AL_TIME)
MODIFY AL_TIME  DEFAULT SYSDATE
MODIFY AL_TYPE  NOT NULL;

-- 확인
SELECT * FROM ALL_CONSTRAINTS WHERE TABLE_NAME='ACCESSLOG';

-- PUBLIC SYNONYM
CREATE PUBLIC SYNONYM AL FOR DBA5.ACCESSLOG;

-- GRANT 
GRANT SELECT, INSERT, UPDATE ON DBA5.ACCESSLOG TO UNITY5;

-- 확인
SELECT * FROM AL;


/*상품테이블 :: GOODS(GO)
  CODE :: 고정사이즈 + UNIQUE + 특정자리마다 의미 부여
  PK    상품코드    NCHAR(4)
  NN    상품명      NVARCHAR2(50)
*/
CREATE TABLE DBA5.GOODS(
 GO_CODE        NCHAR(4),
 GO_NAME        NVARCHAR2(50)
)TABLESPACE UNITY;

-- 제약조건
ALTER TABLE DBA5.GOODS
ADD CONSTRAINT GO_CODE_PK  PRIMARY KEY(GO_CODE)
MODIFY GO_NAME  NOT NULL;

-- 확인
SELECT * FROM ALL_CONSTRAINTS WHERE TABLE_NAME='GOODS';

-- SYNONYM
CREATE PUBLIC SYNONYM GO FOR DBA5.GOODS;

-- GRANT 
GRANT SELECT, INSERT, UPDATE ON DBA5.GOODS TO UNITY5;

-- 확인
SELECT * FROM GO;


/*
장바구니테이블 :: BASKET(BA)
 FK  PK 아이디      NVARCHAR2(10) 
 FK     상품코드     NCHAR(4)   
 DF     재고수량    NUMBER(3,0)     DEFAULT -1
 DF     사업자 등록번호    NVARCHAR2(10) 
*/
CREATE TABLE DBA5.BASKET(
  BA_MMID       NVARCHAR2(10),
  BA_SAGOCODE     NCHAR(4),
  BA_QUANTITY   NUMBER(3,0),
  BA_SASECODE   NVARCHAR2(10)
)TABLESPACE UNITY;

-- CONSTRAINTS
ALTER TABLE DBA5.BASKET
ADD CONSTRAINT BA_MMID_GOCODE_SECODE_PK   PRIMARY KEY(BA_MMID, BA_GOCODE)
ADD CONSTRAINT BA_MMID_FK   FOREIGN KEY(BA_MMID) REFERENCES DBA5.MEMBERS(MM_ID)
ADD CONSTRAINT BA_GOCODE_SECODE_FK FOREIGN KEY(BA_GOCODE, BA_SECODE) REFERENCES DBA5.GOODS(GO_CODE)
MODIFY BA_QUANTITY  DEFAULT 1;

-- 확인
SELECT * FROM ALL_CONSTRAINTS WHERE TABLE_NAME='BASKET';

-- SYNONYM
CREATE PUBLIC SYNONYM BA FOR DBA5.BASKET;

-- GRANT 
GRANT SELECT, INSERT, UPDATE ON HOONZZANG.BASKET TO UNITY5;

-- 확인
SELECT * FROM BA;


/* 주문테이블 :: ORDERS(OR)
  FK PK 아이디     NVARCAHR2(10)
  DF PK 주문일자   DATE DEFAULT SYSDATE
  NN 주문상태   NCHAR(1) DEFAULT 'I'       주문완료 : 'C'
*/
CREATE TABLE DBA5.ORDERS(
  OR_MMID       NVARCHAR2(10),
  OR_DATE       DATE,
  OR_STATE      NCHAR(1)
)TABLESPACE UNITY;

-- CONSTRAINTS
ALTER TABLE DBA5.ORDERS
ADD CONSTRAINT OR_MMID_DATE_PK      PRIMARY KEY(OR_MMID, OR_DATE)
ADD CONSTRAINT OR_MMID_FK      FOREIGN KEY(OR_MMID) REFERENCES HOONZZANG.MEMBERS(MM_ID)
MODIFY OR_DATE DEFAULT SYSDATE
MODIFY OR_STATE NOT NULL;

-- 확인
SELECT * FROM ALL_CONSTRAINTS WHERE TABLE_NAME='ORDERS';

-- SYNONYM
CREATE PUBLIC SYNONYM "OR" FOR DBA5.ORDERS;

-- GRANT 
GRANT SELECT, INSERT, UPDATE ON DBA5.ORDERS TO UNITY5;

-- 확인
SELECT * FROM "OR";


/* 주문상세테이블 :: ORDERDETAIL(OD)
  FK PK 아이디     NVARCHAR2(10)
  FK PK 주문일자    DATE
  FK PK 상품코드     NCHAR(4)
     DF 주문수량     NUMBER(3,0)
     DF 판매상태    DEFAULT 'P'         판매 : 'P'   반품 : 'R'
*/
CREATE TABLE DBA5.ORDERDETAIL(
  OD_ORMMID     NVARCHAR2(10),
  OD_ORDATE     DATE,   
  OD_GOCODE     NCHAR(4),
  OD_QUANTITY   NUMBER(3,0),
  OD_STATE      NCHAR(1)
)TABLESPACE UNITY;

-- CONSTRAINTS
ALTER TABLE DBA5.ORDERDETAIL
ADD CONSTRAINT OD_ORMMID_DATE_PK PRIMARY KEY(OD_ORMMID, OD_ORDATE)
ADD CONSTRAINT OD_ORMMID_FK FOREIGN KEY(OD_ORMMID, OD_ORDATE) 
REFERENCES DBA5.ORDERS(OR_MMID, OR_DATE)
MODIFY OD_QUANTITY DEFAULT 1
MODIFY OD_STATE DEFAULT 'P';

-- 확인
SELECT * FROM ALL_CONSTRAINTS WHERE TABLE_NAME='ORDERS';

-- SYNONYM
CREATE PUBLIC SYNONYM OD FOR DBA5.ORDERDETAIL;
-- GRANT 
GRANT SELECT, INSERT, UPDATE ON DBA5.ORDERDETAIL TO UNITY5;
-- 확인
SELECT * FROM OD;


-->> 판매자테이블 추가
/*  판매자 :: SELLER(SE)
  PK     사업자등록번호   SE_CODE    NCHAR(10)
  NN     상호            SE_NAME    NVARCHAR2(100) 
  NN     사업자패스워드    SE_PASSWORD     NVARCHAR2(10)
  DF     판매자상태      DEFAULT 'A'       활동중 : 'A'   휴면중 : 'I'
*/
CREATE TABLE DBA5.SELLER(
  SE_CODE   NCHAR(10),
  SE_NAME   NVARCHAR2(100),
  SE_PASSWORD NVARCHAR2(10),
  SE_STATE      NCHAR(1)
)TABLESPACE UNITY;

-- CONSTRAINTS
ALTER TABLE SELLER
ADD CONSTRAINT SE_CODE_PK   PRIMARY KEY(SE_CODE)
MODIFY SE_PASSWORD NOT NULL;
MODIFY SE_NAME NOT NULL;

-- 확인
SELECT * FROM ALL_CONSTRAINTS WHERE TABLE_NAME='SELLER';

-- SYNONYM
CREATE PUBLIC SYNONYM SE FOR DBA5.SELLER;

-- GRANT 
GRANT SELECT, INSERT, UPDATE ON DBA5.SELLER TO UNITY5;

-- 확인
SELECT * FROM SE;

 /*SALES(SA) :: 테이블생성
    FK PK  SA_GOCODE    NCHAR(4)
    FK PK  SA_SECODE    NCHAR(10)
       DF  SA_PRICE     NUMBER(6,0)
       DF  SA_STOCK     NUMBER(3,0)
       DF  SA_IMAGE     NUMBER(21) 
*/
-- SALES TABLE
CREATE TABLE DBA5.SALES(
  SA_GOCODE     NCHAR(4),
  SA_SECODE     NCHAR(10),
  SA_PRICE      NUMBER(6,0),
  SA_STOCK      NUMBER(3,0),
  SA_IMAGE      NUMBER(21) --> 이 부분은 추후 SI 테이블 생성 시 삭제할 부분이다.
)TABLESPACE UNITY;

-- CONSTRAINTS
ALTER TABLE DBA5.SALES
ADD CONSTRAINT SA_GOCODE_SECODE_PK  PRIMARY KEY(SA_GOCODE, SA_SECODE)
ADD CONSTRAINT SA_GOCODE_FK FOREIGN KEY(SA_GOCODE) REFERENCES DBA5.GOODS(GO_CODE)
ADD CONSTRAINT SA_SECODE_FK FOREIGN KEY(SA_SECODE) REFERENCES DBA5.SELLER(SE_CODE)
MODIFY SA_PRICE DEFAULT -1
MODIFY SA_STOCK DEFAULT -1;

-- 확인
SELECT * FROM ALL_CONSTRAINTS WHERE TABLE_NAME='SALES';

-- SYNONYM
CREATE PUBLIC SYNONYM SA FOR DBA5.SALES;
-- GRANT
GRANT SELECT, INSERT, UPDATE ON DBA5.SALES TO UNITY5;
-- 확인
SELECT * FROM SA;


/* 2. 뷰 생성 : 원본 테이블에 직접 접근하지 않아도 사용자가 임의의 뷰를 구성하여 별도의 이름을 붙이고 접근 가능한 사람을 지정 가능
 이를 통해 자주 사용되는 복잡한 SQL문을 매번 작성하지 않아도 된다. 테이블을 대체하여 편리하게 사용이 가능한 장점이 있다.
 본 프로젝트에서는 여러 테이블을 조인하여 회원 정보를 추출하기 위한 MINFO, 상품 조회에 필요한 GOODSINFO VIEW를 생성한다.
*/

-- VIEW 생성(MINFO)
CREATE OR REPLACE VIEW MINFO
AS
SELECT AL.AL_ID AS "MID",
       MM.MM_NAME AS "MNAME",
       TO_CHAR(MAX(AL.AL_TIME)) AS "ALTIME",
       AL.AL_TYPE AS "ALTYPE"
FROM MM INNER JOIN AL ON MM.MM_ID = AL.AL_ID
GROUP BY AL.AL_ID, MM.MM_NAME, AL.AL_TYPE;

--GRANT
GRANT SELECT ON MINFO TO yun, sol, hong, hyeonha;

-- SYNONYM
CREATE PUBLIC SYNONYM MINFO FOR DBA5.MINFO;

--확인
SELECT * FROM MINFO;


-- VIEW 생성(GOODSINFO): SA 기반, GO+SE 컬럼 INNER JOIN으로 VIEW 생성
CREATE OR REPLACE VIEW GOODSINFO
AS
SELECT SA.SA_GOCODE AS GOCODE,
        GO.GO_NAME AS GONAME,
        SA.SA_PRICE AS PRICE,
        SA.SA_STOCK AS STOCK,
        SA.SA_IMAGE AS IMAGE, --> 이 부분은 추후 GOODSINFO VIEW 변경 시 변경될 부분이다.
        SA.SA_SECODE AS SECODE,
        SE.SE_NAME AS SENAME,
        SA.SA_GOCODE || GO.GO_NAME || SA_SECODE || SE.SE_NAME AS "SEARCH"
FROM SA INNER JOIN GO ON SA.SA_GOCODE = GO.GO_CODE
        INNER JOIN SE ON SA.SA_SECODE = SE.SE_CODE;

        
-- 권한 부여
GRANT SELECT ON DBA5.GOODSINFO TO yun, sol, hong, hyeonha;

-- PUBLIC SYNONYM 부여
CREATE PUBLIC SYNONYM GOODSINFO FOR DBA5.GOODSINFO;

-- DEV 확인
SELECT * FROM GOODSINFO;
SELECT * FROM GOODSINFO WHERE SEARCH LIKE '%' || '안성' || '%';

/* 3. SI테이블 생성 : 상세 이미지도 입력할 텐데, 몇 개나 이미지가 입력될지 미리 알지 못할 수 있고 정해놓는 것은 비효율적이므로
 판매상품테이블인 SA에서 SA_IMAGE 컬럼을 제거하고 이미지 테이블을 자식테이블로 신규 생성한다.
 SI_SAGOCODE, SI_SASECODE, SI_SAIMAGE 3가지를 PK로 하는 SAIMAGE 테이블 생성 > PUBLIC SYNONYM은 SI로 설정
*/

-- DBA :: 판매상품테이블 변경
 --1. SAIMAGE TABLE CREATION
 CREATE TABLE SAIMAGE(
    SI_SAGOCODE     NCHAR(4),
    SI_SASECODE     NCHAR(10),
    SI_SAIMAGE      NCHAR(21)
    );
    
 -- 상품코드_셀러코드_L(또는 D).jpg --> 4+1+10+1+1+4=21
 
 --2. SA TABLE DATA >> SI COPY
 INSERT INTO SI
 SELECT SA_GOCODE, SA_SECODE, SA_IMAGE FROM SA;
 COMMIT; --(DML구문은 COMMIT필요)
 
 SELECT * FROM SI;
 
 UPDATE SI SET SI_SAIMAGE = SUBSTR(SI_SAIMAGE, 1, 15) || '_L.jpg';
 
 --3. SI TABLE ADDING CONSTRAINTS : PK, FK, NN
 ALTER TABLE SAIMAGE
 ADD CONSTRAINT SI_GOCODE_SECODE_IMAGE_PK PRIMARY KEY(SI_SAGOCODE, SI_SASECODE, SI_SAIMAGE);

 ALTER TABLE SAIMAGE
 ADD CONSTRAINT SI_SAGOCODE_SASECODE_FK FOREIGN KEY(SI_SAGOCODE, SI_SASECODE)
 REFERENCES SALES(SA_GOCODE, SA_SECODE);
 
 ALTER TABLE SAIMAGE
 MODIFY SI_SAIMAGE NOT NULL;
 
 -- 확인
SELECT * FROM ALL_CONSTRAINTS WHERE TABLE_NAME='SAIMAGE';

 --4. SA TABLE SA_IMAGE컬럼 삭제
 ALTER TABLE SALES DROP COLUMN SA_IMAGE;
 
 --확인
 SELECT * FROM SA;
 
 --5. 권한부여
 GRANT SELECT, INSERT, UPDATE ON DBA5.SAIMAGE TO yun, sol, hong, hyeonha; 

 --6. 상품 상세 이미지
 SELECT SI_SAGOCODE, SI_SASECODE, SUBSTR(SI_SAIMAGE, 1, 15) || '_B.jpg' FROM SI;
 
 --7. PUBLIC SYNONYM
 CREATE PUBLIC SYNONYM SI FOR DBA5.SAIMAGE; 
 
-- DEV
SELECT * FROM SI;


/* 
4. GOODSINFO VIEW 수정 : SI 테이블을 신규 생성했으므로 그 내용을 반영하여(이미지 삽입 포함) VIEW 하나에서 볼 수 있게 REPLACE
*/
CREATE OR REPLACE VIEW GOODSINFO
AS
SELECT  SA.SA_GOCODE AS GOCODE,
        GO.GO_NAME AS GONAME,
        SA.SA_PRICE AS PRICE,
        SA.SA_STOCK AS STOCK,
        SA.SA_SECODE AS SECODE,
        SE.SE_NAME AS SENAME,
        SI.LIMAGE AS LIMAGE,
        SI.BIMAGE AS BIMAGE,
        SA.SA_GOCODE || GO.GO_NAME || SA.SA_SECODE || SE.SE_NAME AS "SEARCH"
FROM SA INNER JOIN GO ON SA.SA_GOCODE = GO.GO_CODE
        INNER JOIN SE ON SA.SA_SECODE = SE.SE_CODE
        INNER JOIN (SELECT  SI1.GOCODE AS GOCODE,
                            SI1.SECODE AS SECODE,
                            SI1.LIMAGE AS LIMAGE,
                            SI2.BIMAGE AS BIMAGE
                    FROM       (SELECT SI_SAGOCODE AS GOCODE, SI_SASECODE AS SECODE, SI_SAIMAGE AS LIMAGE 
                                FROM SI WHERE SI_SAIMAGE LIKE '%L.jpg') SI1 
                                INNER JOIN (SELECT SI_SAGOCODE AS GOCODE, SI_SASECODE AS SECODE, SI_SAIMAGE AS BIMAGE 
                                FROM SI WHERE SI_SAIMAGE LIKE '%B.jpg') SI2 
                                ON SI1.GOCODE = SI2.GOCODE AND SI1.SECODE = SI2.SECODE) SI
        ON SA.SA_GOCODE = SI.GOCODE AND SA.SA_SECODE = SI.SECODE;

 -- 권한부여 
GRANT SELECT, INSERT, UPDATE ON GOODSINFO TO yun, sol, hong, hyeonha;

 --확인
SELECT * FROM GOODSINFO;



-- 5. BASKETLIST VIEW 생성 : 장바구니 조회를 한번에 편리하게 관리하기 위한 새로운 VIEW 생성
CREATE OR REPLACE VIEW BASKETLIST
AS
SELECT  MM.MM_ID AS MID,
        MM.MM_NAME AS MNAME,
        GO.GO_CODE AS GOCODE,
        GO.GO_NAME AS GONAME,
        SA.SA_PRICE AS GOPRICE,
        SE.SE_CODE AS SECODE,
        SE.SE_NAME AS SENAME,
        OD.OD_QUANTITY AS QTY,
        SI1.LIMAGE AS GOIMAGE
FROM OD INNER JOIN MM ON OD.OD_ORMMID = MM.MM_ID
        INNER JOIN GO ON OD.OD_SAGOCODE = GO.GO_CODE
        INNER JOIN SE ON OD.OD_SASECODE = SE.SE_CODE
        INNER JOIN SA ON OD.OD_SAGOCODE = SA.SA_GOCODE AND OD.OD_SASECODE = SA.SA_SECODE
        INNER JOIN (SELECT SI_SAGOCODE AS GOCODE, SI_SASECODE AS SECODE, SI_SAIMAGE AS LIMAGE 
                   FROM SI WHERE SI_SAIMAGE LIKE '%L.jpg') SI1
                    ON SI1.GOCODE = OD.OD_SAGOCODE AND SI1.SECODE = OD.OD_SASECODE;



--PUBLIC SYNONYM
CREATE PUBLIC SYNONYM BL FOR DBA5.BASKETLIST;

--GRANT
GRANT SELECT, INSERT, UPDATE ON BL TO yun, sol, hong, hyeonha;

--확인                    
SELECT * FROM BL;
